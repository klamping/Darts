// Generated by CoffeeScript 1.3.3
(function() {
  var Backbone, Game, Kit, Round, RoundList, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone = require('backbone');

  Kit = require('../src/Kit').Kit;

  Round = require('../src/Round').Round;

  RoundList = (function(_super) {

    __extends(RoundList, _super);

    function RoundList() {
      return RoundList.__super__.constructor.apply(this, arguments);
    }

    RoundList.prototype.model = Round;

    return RoundList;

  })(Backbone.Collection);

  Game = (function(_super) {

    __extends(Game, _super);

    function Game() {
      return Game.__super__.constructor.apply(this, arguments);
    }

    Game.prototype.initialize = function() {
      var round, _i, _len, _ref;
      this.numRounds = 0;
      this.rounds = new RoundList;
      _ref = this.get('rounds');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        round = _ref[_i];
        this.rounds.add(new Round({
          kits: round,
          round: this.numRounds
        }));
      }
      this.rounds.on('change', function() {
        return this.set('score', this.getScore());
      }, this);
      this.set('score', this.getScore());
      return this.set('finished', this.isGameFinished());
    };

    Game.prototype.getScore = function() {
      var total;
      total = 0;
      this.rounds.each(function(round) {
        return total += round.get('score');
      });
      return total;
    };

    Game.prototype.isGameFinished = function() {
      var unfinished;
      unfinished = this.rounds.find(function(round) {
        return round.kits.length < 7;
      });
      if (unfinished) {
        return false;
      }
      return true;
    };

    return Game;

  })(Backbone.Model);

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Game = Game;

}).call(this);
