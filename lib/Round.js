// Generated by CoffeeScript 1.3.3
(function() {
  var Backbone, Kit, KitList, Round, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone = require('backbone');

  Kit = require('../lib/Kit').Kit;

  KitList = (function(_super) {

    __extends(KitList, _super);

    function KitList() {
      return KitList.__super__.constructor.apply(this, arguments);
    }

    KitList.prototype.model = Kit;

    return KitList;

  })(Backbone.Collection);

  Round = (function(_super) {

    __extends(Round, _super);

    function Round() {
      return Round.__super__.constructor.apply(this, arguments);
    }

    Round.prototype.defaults = {
      values: [15, 16, 17, 18, 19, 20, 25]
    };

    Round.prototype.initialize = function() {
      var kit, _i, _len, _ref;
      this.kits = new KitList;
      this.numKits = 0;
      _ref = this.get('kits');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        kit = _ref[_i];
        this.addKit(this.get('values')[this.numKits], kit);
      }
      this.set('score', this.getScore());
      return this.on('change:kits', function() {
        return this.set('score', this.getScore());
      });
    };

    Round.prototype.addKit = function(value, hits) {
      var kit;
      if (this.numKits < this.get('values').length) {
        kit = new Kit({
          'value': value,
          'hits': hits
        });
        this.kits.add(kit);
        return this.numKits++;
      } else {
        throw new Error('Cannot add another kit');
      }
    };

    Round.prototype.setKitHits = function(value, hits) {
      return console.log(this.kits.models);
    };

    Round.prototype.getScore = function() {
      var total;
      return total = 0;
    };

    return Round;

  })(Backbone.Model);

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Round = Round;

}).call(this);
