// Generated by CoffeeScript 1.3.3
(function() {
  var Backbone, Kit, KitList, Round,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (!(typeof Meteor !== "undefined" && Meteor !== null)) {
    Backbone = require('backbone');
    Kit = require('../src/Kit').Kit;
  }

  KitList = (function(_super) {

    __extends(KitList, _super);

    function KitList() {
      return KitList.__super__.constructor.apply(this, arguments);
    }

    KitList.prototype.model = Kit;

    return KitList;

  })(Backbone.Collection);

  Round = (function(_super) {

    __extends(Round, _super);

    function Round() {
      return Round.__super__.constructor.apply(this, arguments);
    }

    Round.prototype.defaults = {
      values: [15, 16, 17, 18, 19, 20, 25]
    };

    Round.prototype.initialize = function() {
      var kit, that, _i, _len, _ref;
      that = this;
      this.kits = new KitList;
      _ref = this.get('kits');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        kit = _ref[_i];
        this.addKit(this.get('values')[this.kits.length], kit);
      }
      this.set('score', this.getScore());
      return this.kits.on('all', function() {
        return this.set('score', this.getScore());
      }, this);
    };

    Round.prototype.addKit = function(value, hits) {
      var kit;
      if (this.kits.length < this.get('values').length) {
        kit = new Kit({
          'id': value,
          'hits': hits
        });
        this.kits.add(kit);
        return kit;
      } else {
        throw new Error('Too many kits added, cannot add another kit');
      }
    };

    Round.prototype.setKitHits = function(value, hits) {
      var kit;
      kit = this.kits.get(value);
      if (kit) {
        kit.set('hits', hits);
      } else {
        kit = this.addKit(value, hits);
      }
      return this.set('score', this.getScore());
    };

    Round.prototype.getScore = function() {
      var total;
      total = 0;
      this.kits.each(function(kit) {
        return total += kit.get('score');
      });
      return total;
    };

    Round.prototype.getThrowsLeft = function() {
      return this.get('values').length - this.kits.length;
    };

    return Round;

  })(Backbone.Model);

  if ((typeof exports !== "undefined" && exports !== null)) {
    exports.Round = Round;
  }

}).call(this);
